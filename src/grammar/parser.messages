program: VERS
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##
#

Expected section or declaration.

program: OPERATION LABEL VERS VERS
##
## Ends in an error in state: 3.
##
## destinataire -> VERS . holder [ SUR RPAR RETROCESSION QUOTEPART QUAND POUR PAR OPPOSABLE OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## VERS
##
#
program: EVENEMENT VERS
##
## Ends in an error in state: 143.
##
## event_decl -> EVENEMENT . LIDENT ATTEINT QUAND event_expr [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## EVENEMENT
##
#
program: OPERATION LABEL VERS ASSIETTE VERS
##
## Ends in an error in state: 8.
##
## pool -> ASSIETTE . LIDENT [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND POUR PLUS PAR OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## pool -> ASSIETTE . LIDENT context_refinement [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND POUR PLUS PAR OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## ASSIETTE
##
#
program: OPERATION LABEL VERS LIDENT LBRA VERS
##
## Ends in an error in state: 5.
##
## labeled_actor_desc -> LIDENT LBRA . LIDENT RBRA [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND POUR PLUS PAR OU OPPOSABLE OPERATION MULT MONTANT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## LIDENT LBRA
##

Expected lowercase identifier.



program: OPERATION LABEL POUR VERS
##
## Ends in an error in state: 27.
##
## op_context -> POUR . context [ SUR POUR PAR ]
##
## The known suffix of the stack is as follows:
## POUR
##
#
program: OPERATION LABEL POUR UIDENT VERS
##
## Ends in an error in state: 28.
##
## context -> UIDENT . LPAR separated_nonempty_list(COMMA,UIDENT) RPAR [ UIDENT TOUT SUR POUR PAR OPERATION MINUS EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## UIDENT
##
#
program: OPERATION LABEL POUR TOUT VERS
##
## Ends in an error in state: 35.
##
## context -> TOUT . UIDENT [ UIDENT TOUT SUR POUR PAR OPERATION MINUS EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## TOUT
##

Expected context cases of a given context type, either for all cases or by listing them.
Examples:
 - pour Support Salles VOD
 - pour tout Support

program: EVENEMENT LIDENT ATTEINT QUAND EVENEMENT LIDENT VERS
##
## Ends in an error in state: 147.
##
## event_decl -> EVENEMENT LIDENT ATTEINT QUAND event_expr . [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
## event_expr_desc -> event_expr . ET event_expr [ OU OPERATION EVENEMENT ET EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
## event_expr_desc -> event_expr . OU event_expr [ OU OPERATION EVENEMENT ET EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## EVENEMENT LIDENT ATTEINT QUAND event_expr
##

Unexpected word after event expression.

program: OPERATION LABEL UIDENT
##
## Ends in an error in state: 2.
##
## operation -> OPERATION LABEL . option(destinataire) list(op_context) source expression [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## OPERATION LABEL
##

Expected some context, or a destination, or a redistribution expression.

program: OPERATION LABEL POUR TOUT UIDENT VERS
##
## Ends in an error in state: 38.
##
## list(op_context) -> op_context . list(op_context) [ SUR PAR ]
##
## The known suffix of the stack is as follows:
## op_context
##

Unexpected word after context.

program: EVENEMENT LIDENT VERS
##
## Ends in an error in state: 144.
##
## event_decl -> EVENEMENT LIDENT . ATTEINT QUAND event_expr [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## EVENEMENT LIDENT
##
#
program: EVENEMENT LIDENT ATTEINT VERS
##
## Ends in an error in state: 145.
##
## event_decl -> EVENEMENT LIDENT ATTEINT . QUAND event_expr [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## EVENEMENT LIDENT ATTEINT
##
#
program: EVENEMENT LIDENT ATTEINT QUAND VERS
##
## Ends in an error in state: 146.
##
## event_decl -> EVENEMENT LIDENT ATTEINT QUAND . event_expr [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## EVENEMENT LIDENT ATTEINT QUAND
##

Malformed event declaration. Well-formed examples:
- evenement my_event atteint quand my_money = 100
- evenement my_event atteint quand 2023/12/25

program: ENTREE VERS
##
## Ends in an error in state: 148.
##
## input_decl -> ENTREE . LIDENT input_type loption(input_context_decl) [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
## input_decl -> ENTREE . ASSIETTE LIDENT loption(input_context_decl) [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## ENTREE
##
#
program: ENTREE LIDENT VERS
##
## Ends in an error in state: 149.
##
## input_decl -> ENTREE LIDENT . input_type loption(input_context_decl) [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## ENTREE LIDENT
##

Malformed input declaration. An input is declared with an optional computable
flag, a name, an optionnal context association, and a type.
Well-formed examples:
- entree my_input type entier
- entree assiette my_input type argent contextualisee par My_context_type

program: ENTREE LIDENT TYPE VERS
##
## Ends in an error in state: 150.
##
## input_type -> TYPE . base_type [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTUALISEE CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## TYPE
##

Expected a type identifier. It can be:
- entier
- rationnel
- argent

program: CONTEXTE VERS
##
## Ends in an error in state: 182.
##
## context_decl -> CONTEXTE . UIDENT COLON nonempty_list(context_case) [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## CONTEXTE
##
#
program: CONTEXTE UIDENT VERS
##
## Ends in an error in state: 183.
##
## context_decl -> CONTEXTE UIDENT . COLON nonempty_list(context_case) [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## CONTEXTE UIDENT
##
#
program: CONTEXTE UIDENT COLON VERS
##
## Ends in an error in state: 184.
##
## context_decl -> CONTEXTE UIDENT COLON . nonempty_list(context_case) [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## CONTEXTE UIDENT COLON
##
#
program: CONTEXTE UIDENT COLON MINUS VERS
##
## Ends in an error in state: 185.
##
## context_case -> MINUS . UIDENT [ OPERATION MINUS EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## MINUS
##
#
program: CONTEXTE UIDENT COLON MINUS UIDENT VERS
##
## Ends in an error in state: 188.
##
## nonempty_list(context_case) -> context_case . [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
## nonempty_list(context_case) -> context_case . nonempty_list(context_case) [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## context_case
##

Malformed context type declaration. Example:
contexte My_context_type :
 - my_case_1
 - my_case_2

program: CONSTANTE VERS
##
## Ends in an error in state: 190.
##
## constant_decl -> CONSTANTE . LIDENT COLON literal [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## CONSTANTE
##
#
program: CONSTANTE LIDENT VERS
##
## Ends in an error in state: 191.
##
## constant_decl -> CONSTANTE LIDENT . COLON literal [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## CONSTANTE LIDENT
##
#
program: CONSTANTE LIDENT COLON VERS
##
## Ends in an error in state: 192.
##
## constant_decl -> CONSTANTE LIDENT COLON . literal [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## CONSTANTE LIDENT COLON
##

Malformed constant declaration. Example:
- constante my_const : 99.99


program: OPERATION LABEL SUR VERS
##
## Ends in an error in state: 41.
##
## source -> SUR . pool [ RETROCESSION QUOTEPART QUAND BONUS AVANT APRES ]
##
## The known suffix of the stack is as follows:
## SUR
##

Malformed source of repartition. Example:
- sur assiette rbdApresCom

program: OPERATION LABEL VERS LIDENT LBRA LIDENT VERS
##
## Ends in an error in state: 6.
##
## labeled_actor_desc -> LIDENT LBRA LIDENT . RBRA [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND POUR PLUS PAR OU OPPOSABLE OPERATION MULT MONTANT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## LIDENT LBRA LIDENT
##

Expected closing bracket.

program: OPERATION LABEL VERS ASSIETTE LIDENT VERS
##
## Ends in an error in state: 26.
##
## operation -> OPERATION LABEL option(destinataire) . list(op_context) source expression [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## OPERATION LABEL option(destinataire)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 9, spurious reduction of production pool -> ASSIETTE LIDENT
## In state 21, spurious reduction of production holder -> pool
## In state 23, spurious reduction of production destinataire -> VERS holder
## In state 84, spurious reduction of production option(destinataire) -> destinataire
##

Unexpected word after destination.

program: OPERATION LABEL SUR ASSIETTE LIDENT VERS
##
## Ends in an error in state: 45.
##
## operation -> OPERATION LABEL option(destinataire) list(op_context) source . expression [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## OPERATION LABEL option(destinataire) list(op_context) source
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 9, spurious reduction of production pool -> ASSIETTE LIDENT
## In state 42, spurious reduction of production source -> SUR pool
##

Unexpected word after source.

program: OPERATION VERS
##
## Ends in an error in state: 1.
##
## operation -> OPERATION . LABEL option(destinataire) list(op_context) source expression [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## OPERATION
##

Expected label for operation.

program: DEFAUT VERS
##
## Ends in an error in state: 177.
##
## default_decl -> DEFAUT . SUR pool VERS holder [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## DEFAUT
##
#
program: DEFAUT SUR ASSIETTE LIDENT UIDENT
##
## Ends in an error in state: 9.
##
## pool -> ASSIETTE LIDENT . [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND POUR PLUS PAR OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## pool -> ASSIETTE LIDENT . context_refinement [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND POUR PLUS PAR OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## ASSIETTE LIDENT
##
#
program: DEFAUT SUR ASSIETTE LIDENT VERS VERS
##
## Ends in an error in state: 180.
##
## default_decl -> DEFAUT SUR pool VERS . holder [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## DEFAUT SUR pool VERS
##

Malformed default declaration. Examples:
 - defaut sur assiette rbd vers assiette rnpp
 - defaut sur assiette rnpp vers prod[residuel]

program: AVANCE VERS
##
## Ends in an error in state: 194.
##
## advance -> AVANCE . LABEL SUR holder PAR actor MONTANT formula [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## AVANCE
##
#
program: AVANCE LABEL VERS
##
## Ends in an error in state: 195.
##
## advance -> AVANCE LABEL . SUR holder PAR actor MONTANT formula [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## AVANCE LABEL
##
#
program: AVANCE LABEL SUR ASSIETTE LIDENT VERS
##
## Ends in an error in state: 197.
##
## advance -> AVANCE LABEL SUR holder . PAR actor MONTANT formula [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## AVANCE LABEL SUR holder
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 9, spurious reduction of production pool -> ASSIETTE LIDENT
## In state 21, spurious reduction of production holder -> pool
##
#
program: AVANCE LABEL SUR ASSIETTE LIDENT PAR VERS
##
## Ends in an error in state: 198.
##
## advance -> AVANCE LABEL SUR holder PAR . actor MONTANT formula [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## AVANCE LABEL SUR holder PAR
##

Malformed advance declaration. Example:
- avance 'my_advance' sur my_source par my_provider montant 5000$ vers my_output

program: DEFICIT VERS
##
## Ends in an error in state: 172.
##
## deficit_decl -> DEFICIT . SUR pool PAR holder [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## DEFICIT
##
#
program: DEFICIT SUR ASSIETTE LIDENT VERS
##
## Ends in an error in state: 174.
##
## deficit_decl -> DEFICIT SUR pool . PAR holder [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## DEFICIT SUR pool
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 9, spurious reduction of production pool -> ASSIETTE LIDENT
##
#
program: DEFICIT SUR ASSIETTE LIDENT PAR VERS
##
## Ends in an error in state: 175.
##
## deficit_decl -> DEFICIT SUR pool PAR . holder [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## DEFICIT SUR pool PAR
##

Malformed deficit declaration. Syntax:
- deficit sur my_assiette PAR my_acteur

program: DEFAUT SUR ASSIETTE LIDENT LPAR VERS
##
## Ends in an error in state: 10.
##
## context_refinement -> LPAR . separated_nonempty_list(COMMA,context_refine_item) RPAR [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND POUR PLUS PAR OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## LPAR
##
#
program: DEFAUT SUR ASSIETTE LIDENT LPAR TOUT VERS
##
## Ends in an error in state: 12.
##
## context_refinement_item_desc -> TOUT . UIDENT [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## TOUT
##
#
program: DEFAUT SUR ASSIETTE LIDENT LPAR UIDENT VERS
##
## Ends in an error in state: 17.
##
## separated_nonempty_list(COMMA,context_refine_item) -> context_refine_item . [ RPAR ]
## separated_nonempty_list(COMMA,context_refine_item) -> context_refine_item . COMMA separated_nonempty_list(COMMA,context_refine_item) [ RPAR ]
##
## The known suffix of the stack is as follows:
## context_refine_item
##
#
program: DEFAUT SUR ASSIETTE LIDENT LPAR UIDENT COMMA VERS
##
## Ends in an error in state: 18.
##
## separated_nonempty_list(COMMA,context_refine_item) -> context_refine_item COMMA . separated_nonempty_list(COMMA,context_refine_item) [ RPAR ]
##
## The known suffix of the stack is as follows:
## context_refine_item COMMA
##

Malformed context refinement. Syntax:
- rbd(Salles,France,tout Secteur)










program: AVANCE LABEL SUR LIDENT UIDENT
##
## Ends in an error in state: 4.
##
## actor_desc -> LIDENT . [ VERS SUR RPAR RETROCESSION QUOTEPART QUAND POUR PAR OPPOSABLE OPERATION MONTANT EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## labeled_actor_desc -> LIDENT . LBRA LIDENT RBRA [ VERS SUR RPAR RETROCESSION QUOTEPART QUAND POUR PAR OPPOSABLE OPERATION MONTANT EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## LIDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL POUR UIDENT LPAR VERS
##
## Ends in an error in state: 29.
##
## context -> UIDENT LPAR . separated_nonempty_list(COMMA,UIDENT) RPAR [ UIDENT TOUT SUR POUR PAR OPERATION MINUS EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## UIDENT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL POUR UIDENT LPAR UIDENT VERS
##
## Ends in an error in state: 30.
##
## separated_nonempty_list(COMMA,UIDENT) -> UIDENT . [ RPAR ]
## separated_nonempty_list(COMMA,UIDENT) -> UIDENT . COMMA separated_nonempty_list(COMMA,UIDENT) [ RPAR ]
##
## The known suffix of the stack is as follows:
## UIDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL POUR UIDENT LPAR UIDENT COMMA VERS
##
## Ends in an error in state: 31.
##
## separated_nonempty_list(COMMA,UIDENT) -> UIDENT COMMA . separated_nonempty_list(COMMA,UIDENT) [ RPAR ]
##
## The known suffix of the stack is as follows:
## UIDENT COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR VERS
##
## Ends in an error in state: 43.
##
## source -> PAR . actor [ RETROCESSION QUOTEPART QUAND BONUS AVANT APRES ]
##
## The known suffix of the stack is as follows:
## PAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT RETROCESSION VERS
##
## Ends in an error in state: 46.
##
## simple_expr -> RETROCESSION . formula SUR holder option(destinataire) [ RPAR RETROCESSION QUOTEPART QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## RETROCESSION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: EVENEMENT LIDENT ATTEINT QUAND LPAR VERS
##
## Ends in an error in state: 48.
##
## formula -> LPAR . formula RPAR [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONSTANTE LIDENT COLON INT ANS UIDENT
##
## Ends in an error in state: 53.
##
## duration_year -> INT ANS . option(duration_month) [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## INT ANS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONSTANTE LIDENT COLON INT ANS INT VERS
##
## Ends in an error in state: 54.
##
## duration_month -> INT . MOIS [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: EVENEMENT LIDENT ATTEINT QUAND LPAR DATE VERS
##
## Ends in an error in state: 65.
##
## formula -> LPAR formula . RPAR [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . PLUS formula [ TOTAL RPAR PLUS MULT MINUS DIV COURANT ]
## formula_desc -> formula . MINUS formula [ TOTAL RPAR PLUS MULT MINUS DIV COURANT ]
## formula_desc -> formula . MULT formula [ TOTAL RPAR PLUS MULT MINUS DIV COURANT ]
## formula_desc -> formula . DIV formula [ TOTAL RPAR PLUS MULT MINUS DIV COURANT ]
## formula_desc -> formula . COURANT [ TOTAL RPAR PLUS MULT MINUS DIV COURANT ]
## formula_desc -> formula . TOTAL [ TOTAL RPAR PLUS MULT MINUS DIV COURANT ]
##
## The known suffix of the stack is as follows:
## LPAR formula
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: EVENEMENT LIDENT ATTEINT QUAND DATE PLUS VERS
##
## Ends in an error in state: 68.
##
## formula_desc -> formula PLUS . formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## formula PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: EVENEMENT LIDENT ATTEINT QUAND DATE PLUS DATE MOIS
##
## Ends in an error in state: 69.
##
## formula_desc -> formula . PLUS formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula PLUS formula . [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . MINUS formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . MULT formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . DIV formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . COURANT [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . TOTAL [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## formula PLUS formula
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: EVENEMENT LIDENT ATTEINT QUAND DATE MULT VERS
##
## Ends in an error in state: 70.
##
## formula_desc -> formula MULT . formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## formula MULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: EVENEMENT LIDENT ATTEINT QUAND DATE MULT DATE MOIS
##
## Ends in an error in state: 71.
##
## formula_desc -> formula . PLUS formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . MINUS formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . MULT formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula MULT formula . [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . DIV formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . COURANT [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . TOTAL [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## formula MULT formula
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: EVENEMENT LIDENT ATTEINT QUAND DATE DIV VERS
##
## Ends in an error in state: 76.
##
## formula_desc -> formula DIV . formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## formula DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: EVENEMENT LIDENT ATTEINT QUAND DATE DIV DATE MOIS
##
## Ends in an error in state: 77.
##
## formula_desc -> formula . PLUS formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . MINUS formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . MULT formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . DIV formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula DIV formula . [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . COURANT [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . TOTAL [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## formula DIV formula
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: EVENEMENT LIDENT ATTEINT QUAND DATE MINUS VERS
##
## Ends in an error in state: 78.
##
## formula_desc -> formula MINUS . formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## formula MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: EVENEMENT LIDENT ATTEINT QUAND DATE MINUS DATE MOIS
##
## Ends in an error in state: 79.
##
## formula_desc -> formula . PLUS formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . MINUS formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula MINUS formula . [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . MULT formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . DIV formula [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . COURANT [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . TOTAL [ VERS TOTAL SUR RPAR RETROCESSION QUOTEPART QUAND PLUS OU OPPOSABLE OPERATION MULT MINUS LPAR EVENEMENT ET EQ EOF ENVERS ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## formula MINUS formula
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT RETROCESSION DATE VERS
##
## Ends in an error in state: 80.
##
## formula_desc -> formula . PLUS formula [ TOTAL SUR PLUS MULT MINUS DIV COURANT ]
## formula_desc -> formula . MINUS formula [ TOTAL SUR PLUS MULT MINUS DIV COURANT ]
## formula_desc -> formula . MULT formula [ TOTAL SUR PLUS MULT MINUS DIV COURANT ]
## formula_desc -> formula . DIV formula [ TOTAL SUR PLUS MULT MINUS DIV COURANT ]
## formula_desc -> formula . COURANT [ TOTAL SUR PLUS MULT MINUS DIV COURANT ]
## formula_desc -> formula . TOTAL [ TOTAL SUR PLUS MULT MINUS DIV COURANT ]
## simple_expr -> RETROCESSION formula . SUR holder option(destinataire) [ RPAR RETROCESSION QUOTEPART QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## RETROCESSION formula
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT RETROCESSION DATE SUR VERS
##
## Ends in an error in state: 81.
##
## simple_expr -> RETROCESSION formula SUR . holder option(destinataire) [ RPAR RETROCESSION QUOTEPART QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## RETROCESSION formula SUR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT RETROCESSION DATE SUR LIDENT SUR
##
## Ends in an error in state: 82.
##
## simple_expr -> RETROCESSION formula SUR holder . option(destinataire) [ RPAR RETROCESSION QUOTEPART QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## RETROCESSION formula SUR holder
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 4, spurious reduction of production actor_desc -> LIDENT
## In state 24, spurious reduction of production actor -> actor_desc
## In state 25, spurious reduction of production holder -> actor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT QUOTEPART VERS
##
## Ends in an error in state: 85.
##
## simple_expr -> QUOTEPART . formula option(destinataire) list(opposable) [ RPAR RETROCESSION QUOTEPART QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## simple_expr -> QUOTEPART . RESTE option(destinataire) [ RPAR RETROCESSION QUOTEPART QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## QUOTEPART
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT QUOTEPART RESTE UIDENT
##
## Ends in an error in state: 86.
##
## simple_expr -> QUOTEPART RESTE . option(destinataire) [ RPAR RETROCESSION QUOTEPART QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## QUOTEPART RESTE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT QUOTEPART DATE SUR
##
## Ends in an error in state: 88.
##
## formula_desc -> formula . PLUS formula [ VERS TOTAL RPAR RETROCESSION QUOTEPART QUAND PLUS OPPOSABLE OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . MINUS formula [ VERS TOTAL RPAR RETROCESSION QUOTEPART QUAND PLUS OPPOSABLE OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . MULT formula [ VERS TOTAL RPAR RETROCESSION QUOTEPART QUAND PLUS OPPOSABLE OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . DIV formula [ VERS TOTAL RPAR RETROCESSION QUOTEPART QUAND PLUS OPPOSABLE OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . COURANT [ VERS TOTAL RPAR RETROCESSION QUOTEPART QUAND PLUS OPPOSABLE OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . TOTAL [ VERS TOTAL RPAR RETROCESSION QUOTEPART QUAND PLUS OPPOSABLE OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## simple_expr -> QUOTEPART formula . option(destinataire) list(opposable) [ RPAR RETROCESSION QUOTEPART QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## QUOTEPART formula
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT QUOTEPART DATE VERS LIDENT VERS
##
## Ends in an error in state: 89.
##
## simple_expr -> QUOTEPART formula option(destinataire) . list(opposable) [ RPAR RETROCESSION QUOTEPART QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## QUOTEPART formula option(destinataire)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 4, spurious reduction of production actor_desc -> LIDENT
## In state 24, spurious reduction of production actor -> actor_desc
## In state 25, spurious reduction of production holder -> actor
## In state 23, spurious reduction of production destinataire -> VERS holder
## In state 84, spurious reduction of production option(destinataire) -> destinataire
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT QUOTEPART DATE OPPOSABLE VERS
##
## Ends in an error in state: 90.
##
## opposable -> OPPOSABLE . formula ENVERS actor PAR actor [ RPAR RETROCESSION QUOTEPART QUAND OPPOSABLE OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## OPPOSABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT QUOTEPART DATE OPPOSABLE DATE VERS
##
## Ends in an error in state: 91.
##
## formula_desc -> formula . PLUS formula [ TOTAL PLUS MULT MINUS ENVERS DIV COURANT ]
## formula_desc -> formula . MINUS formula [ TOTAL PLUS MULT MINUS ENVERS DIV COURANT ]
## formula_desc -> formula . MULT formula [ TOTAL PLUS MULT MINUS ENVERS DIV COURANT ]
## formula_desc -> formula . DIV formula [ TOTAL PLUS MULT MINUS ENVERS DIV COURANT ]
## formula_desc -> formula . COURANT [ TOTAL PLUS MULT MINUS ENVERS DIV COURANT ]
## formula_desc -> formula . TOTAL [ TOTAL PLUS MULT MINUS ENVERS DIV COURANT ]
## opposable -> OPPOSABLE formula . ENVERS actor PAR actor [ RPAR RETROCESSION QUOTEPART QUAND OPPOSABLE OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## OPPOSABLE formula
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT QUOTEPART DATE OPPOSABLE DATE ENVERS VERS
##
## Ends in an error in state: 92.
##
## opposable -> OPPOSABLE formula ENVERS . actor PAR actor [ RPAR RETROCESSION QUOTEPART QUAND OPPOSABLE OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## OPPOSABLE formula ENVERS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT QUOTEPART DATE OPPOSABLE DATE ENVERS LIDENT VERS
##
## Ends in an error in state: 93.
##
## opposable -> OPPOSABLE formula ENVERS actor . PAR actor [ RPAR RETROCESSION QUOTEPART QUAND OPPOSABLE OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## OPPOSABLE formula ENVERS actor
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 4, spurious reduction of production actor_desc -> LIDENT
## In state 24, spurious reduction of production actor -> actor_desc
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT QUOTEPART DATE OPPOSABLE DATE ENVERS LIDENT PAR VERS
##
## Ends in an error in state: 94.
##
## opposable -> OPPOSABLE formula ENVERS actor PAR . actor [ RPAR RETROCESSION QUOTEPART QUAND OPPOSABLE OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## OPPOSABLE formula ENVERS actor PAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT QUOTEPART DATE OPPOSABLE DATE ENVERS LIDENT PAR LIDENT VERS
##
## Ends in an error in state: 96.
##
## list(opposable) -> opposable . list(opposable) [ RPAR RETROCESSION QUOTEPART QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## opposable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 4, spurious reduction of production actor_desc -> LIDENT
## In state 24, spurious reduction of production actor -> actor_desc
## In state 95, spurious reduction of production opposable -> OPPOSABLE formula ENVERS actor PAR actor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT QUAND VERS
##
## Ends in an error in state: 99.
##
## when_expr -> QUAND . event_expr sub_expression [ RPAR QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## QUAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: EVENEMENT LIDENT ATTEINT QUAND EVENEMENT VERS
##
## Ends in an error in state: 100.
##
## event_expr_desc -> EVENEMENT . LIDENT [ RETROCESSION QUOTEPART OU OPERATION LPAR EVENEMENT ET EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## EVENEMENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: EVENEMENT LIDENT ATTEINT QUAND DATE VERS
##
## Ends in an error in state: 102.
##
## event_expr_desc -> formula . EQ formula [ RETROCESSION QUOTEPART OU OPERATION LPAR EVENEMENT ET EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANCE ACTEUR ]
## formula_desc -> formula . PLUS formula [ TOTAL PLUS MULT MINUS EQ DIV COURANT ]
## formula_desc -> formula . MINUS formula [ TOTAL PLUS MULT MINUS EQ DIV COURANT ]
## formula_desc -> formula . MULT formula [ TOTAL PLUS MULT MINUS EQ DIV COURANT ]
## formula_desc -> formula . DIV formula [ TOTAL PLUS MULT MINUS EQ DIV COURANT ]
## formula_desc -> formula . COURANT [ TOTAL PLUS MULT MINUS EQ DIV COURANT ]
## formula_desc -> formula . TOTAL [ TOTAL PLUS MULT MINUS EQ DIV COURANT ]
##
## The known suffix of the stack is as follows:
## formula
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: EVENEMENT LIDENT ATTEINT QUAND DATE EQ VERS
##
## Ends in an error in state: 103.
##
## event_expr_desc -> formula EQ . formula [ RETROCESSION QUOTEPART OU OPERATION LPAR EVENEMENT ET EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## formula EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: EVENEMENT LIDENT ATTEINT QUAND DATE EQ DATE VERS
##
## Ends in an error in state: 104.
##
## event_expr_desc -> formula EQ formula . [ RETROCESSION QUOTEPART OU OPERATION LPAR EVENEMENT ET EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANCE ACTEUR ]
## formula_desc -> formula . PLUS formula [ TOTAL RETROCESSION QUOTEPART PLUS OU OPERATION MULT MINUS LPAR EVENEMENT ET EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANCE ACTEUR ]
## formula_desc -> formula . MINUS formula [ TOTAL RETROCESSION QUOTEPART PLUS OU OPERATION MULT MINUS LPAR EVENEMENT ET EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANCE ACTEUR ]
## formula_desc -> formula . MULT formula [ TOTAL RETROCESSION QUOTEPART PLUS OU OPERATION MULT MINUS LPAR EVENEMENT ET EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANCE ACTEUR ]
## formula_desc -> formula . DIV formula [ TOTAL RETROCESSION QUOTEPART PLUS OU OPERATION MULT MINUS LPAR EVENEMENT ET EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANCE ACTEUR ]
## formula_desc -> formula . COURANT [ TOTAL RETROCESSION QUOTEPART PLUS OU OPERATION MULT MINUS LPAR EVENEMENT ET EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANCE ACTEUR ]
## formula_desc -> formula . TOTAL [ TOTAL RETROCESSION QUOTEPART PLUS OU OPERATION MULT MINUS LPAR EVENEMENT ET EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## formula EQ formula
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT QUAND EVENEMENT LIDENT OPERATION
##
## Ends in an error in state: 106.
##
## event_expr_desc -> event_expr . ET event_expr [ RETROCESSION QUOTEPART OU LPAR ET BONUS ]
## event_expr_desc -> event_expr . OU event_expr [ RETROCESSION QUOTEPART OU LPAR ET BONUS ]
## when_expr -> QUAND event_expr . sub_expression [ RPAR QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## QUAND event_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: EVENEMENT LIDENT ATTEINT QUAND EVENEMENT LIDENT OU VERS
##
## Ends in an error in state: 107.
##
## event_expr_desc -> event_expr OU . event_expr [ RETROCESSION QUOTEPART OU OPERATION LPAR EVENEMENT ET EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## event_expr OU
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: EVENEMENT LIDENT ATTEINT QUAND EVENEMENT LIDENT OU EVENEMENT LIDENT VERS
##
## Ends in an error in state: 108.
##
## event_expr_desc -> event_expr . ET event_expr [ RETROCESSION QUOTEPART OU OPERATION LPAR EVENEMENT ET EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANCE ACTEUR ]
## event_expr_desc -> event_expr . OU event_expr [ RETROCESSION QUOTEPART OU OPERATION LPAR EVENEMENT ET EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANCE ACTEUR ]
## event_expr_desc -> event_expr OU event_expr . [ RETROCESSION QUOTEPART OU OPERATION LPAR EVENEMENT ET EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## event_expr OU event_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: EVENEMENT LIDENT ATTEINT QUAND EVENEMENT LIDENT ET VERS
##
## Ends in an error in state: 109.
##
## event_expr_desc -> event_expr ET . event_expr [ RETROCESSION QUOTEPART OU OPERATION LPAR EVENEMENT ET EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## event_expr ET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT APRES EVENEMENT LIDENT LPAR VERS
##
## Ends in an error in state: 111.
##
## sub_expression -> LPAR . expression RPAR [ RPAR QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT BONUS VERS
##
## Ends in an error in state: 112.
##
## simple_expr -> BONUS . formula option(destinataire) [ RPAR RETROCESSION QUOTEPART QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## BONUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT BONUS DATE SUR
##
## Ends in an error in state: 113.
##
## formula_desc -> formula . PLUS formula [ VERS TOTAL RPAR RETROCESSION QUOTEPART QUAND PLUS OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . MINUS formula [ VERS TOTAL RPAR RETROCESSION QUOTEPART QUAND PLUS OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . MULT formula [ VERS TOTAL RPAR RETROCESSION QUOTEPART QUAND PLUS OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . DIV formula [ VERS TOTAL RPAR RETROCESSION QUOTEPART QUAND PLUS OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . COURANT [ VERS TOTAL RPAR RETROCESSION QUOTEPART QUAND PLUS OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## formula_desc -> formula . TOTAL [ VERS TOTAL RPAR RETROCESSION QUOTEPART QUAND PLUS OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
## simple_expr -> BONUS formula . option(destinataire) [ RPAR RETROCESSION QUOTEPART QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## BONUS formula
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT AVANT VERS
##
## Ends in an error in state: 115.
##
## before_expr -> AVANT . event_expr sub_expression [ RPAR OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## AVANT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT AVANT EVENEMENT LIDENT OPERATION
##
## Ends in an error in state: 116.
##
## before_expr -> AVANT event_expr . sub_expression [ RPAR OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANT AVANCE APRES ACTEUR ]
## event_expr_desc -> event_expr . ET event_expr [ RETROCESSION QUOTEPART OU LPAR ET BONUS ]
## event_expr_desc -> event_expr . OU event_expr [ RETROCESSION QUOTEPART OU LPAR ET BONUS ]
##
## The known suffix of the stack is as follows:
## AVANT event_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT BONUS DATE VERS LIDENT MONTANT
##
## Ends in an error in state: 119.
##
## nonempty_list(simple_expr) -> simple_expr . [ RPAR QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANT AVANCE APRES ACTEUR ]
## nonempty_list(simple_expr) -> simple_expr . nonempty_list(simple_expr) [ RPAR QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## simple_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 4, spurious reduction of production actor_desc -> LIDENT
## In state 24, spurious reduction of production actor -> actor_desc
## In state 25, spurious reduction of production holder -> actor
## In state 23, spurious reduction of production destinataire -> VERS holder
## In state 84, spurious reduction of production option(destinataire) -> destinataire
## In state 114, spurious reduction of production simple_expr -> BONUS formula option(destinataire)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT APRES VERS
##
## Ends in an error in state: 122.
##
## after_expr -> APRES . event_expr sub_expression [ RPAR OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## APRES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT APRES EVENEMENT LIDENT OPERATION
##
## Ends in an error in state: 123.
##
## after_expr -> APRES event_expr . sub_expression [ RPAR OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE APRES ACTEUR ]
## event_expr_desc -> event_expr . ET event_expr [ RETROCESSION QUOTEPART OU LPAR ET BONUS ]
## event_expr_desc -> event_expr . OU event_expr [ RETROCESSION QUOTEPART OU LPAR ET BONUS ]
##
## The known suffix of the stack is as follows:
## APRES event_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT QUAND EVENEMENT LIDENT BONUS DATE AVANT
##
## Ends in an error in state: 125.
##
## nonempty_list(when_expr) -> when_expr . [ RPAR OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
## nonempty_list(when_expr) -> when_expr . nonempty_list(when_expr) [ RPAR OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## when_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 113, spurious reduction of production option(destinataire) ->
## In state 114, spurious reduction of production simple_expr -> BONUS formula option(destinataire)
## In state 119, spurious reduction of production nonempty_list(simple_expr) -> simple_expr
## In state 121, spurious reduction of production simple_exprs -> nonempty_list(simple_expr)
## In state 118, spurious reduction of production sub_expression -> simple_exprs
## In state 141, spurious reduction of production when_expr -> QUAND event_expr sub_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT AVANT EVENEMENT LIDENT BONUS DATE APRES EVENEMENT LIDENT BONUS DATE QUAND
##
## Ends in an error in state: 131.
##
## list(after_expr) -> after_expr . list(after_expr) [ RPAR OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## after_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 113, spurious reduction of production option(destinataire) ->
## In state 114, spurious reduction of production simple_expr -> BONUS formula option(destinataire)
## In state 119, spurious reduction of production nonempty_list(simple_expr) -> simple_expr
## In state 121, spurious reduction of production simple_exprs -> nonempty_list(simple_expr)
## In state 118, spurious reduction of production sub_expression -> simple_exprs
## In state 124, spurious reduction of production after_expr -> APRES event_expr sub_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT APRES EVENEMENT LIDENT LPAR BONUS DATE OPERATION
##
## Ends in an error in state: 134.
##
## sub_expression -> LPAR expression . RPAR [ RPAR QUAND OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANT AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 113, spurious reduction of production option(destinataire) ->
## In state 114, spurious reduction of production simple_expr -> BONUS formula option(destinataire)
## In state 119, spurious reduction of production nonempty_list(simple_expr) -> simple_expr
## In state 121, spurious reduction of production simple_exprs -> nonempty_list(simple_expr)
## In state 127, spurious reduction of production expression -> simple_exprs
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT AVANT EVENEMENT LIDENT BONUS DATE QUAND
##
## Ends in an error in state: 137.
##
## nonempty_list(before_expr) -> before_expr . [ RPAR OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE APRES ACTEUR ]
## nonempty_list(before_expr) -> before_expr . nonempty_list(before_expr) [ RPAR OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE APRES ACTEUR ]
##
## The known suffix of the stack is as follows:
## before_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 113, spurious reduction of production option(destinataire) ->
## In state 114, spurious reduction of production simple_expr -> BONUS formula option(destinataire)
## In state 119, spurious reduction of production nonempty_list(simple_expr) -> simple_expr
## In state 121, spurious reduction of production simple_exprs -> nonempty_list(simple_expr)
## In state 118, spurious reduction of production sub_expression -> simple_exprs
## In state 117, spurious reduction of production before_expr -> AVANT event_expr sub_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: OPERATION LABEL PAR LIDENT APRES EVENEMENT LIDENT BONUS DATE QUAND
##
## Ends in an error in state: 139.
##
## nonempty_list(after_expr) -> after_expr . [ RPAR OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
## nonempty_list(after_expr) -> after_expr . nonempty_list(after_expr) [ RPAR OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## after_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 113, spurious reduction of production option(destinataire) ->
## In state 114, spurious reduction of production simple_expr -> BONUS formula option(destinataire)
## In state 119, spurious reduction of production nonempty_list(simple_expr) -> simple_expr
## In state 121, spurious reduction of production simple_exprs -> nonempty_list(simple_expr)
## In state 118, spurious reduction of production sub_expression -> simple_exprs
## In state 124, spurious reduction of production after_expr -> APRES event_expr sub_expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENTREE LIDENT TYPE ARGENT VERS
##
## Ends in an error in state: 155.
##
## input_decl -> ENTREE LIDENT input_type . loption(input_context_decl) [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## ENTREE LIDENT input_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENTREE ASSIETTE LIDENT CONTEXTUALISEE VERS
##
## Ends in an error in state: 156.
##
## input_context_decl -> CONTEXTUALISEE . PAR input_context_list [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## CONTEXTUALISEE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENTREE ASSIETTE LIDENT CONTEXTUALISEE PAR VERS
##
## Ends in an error in state: 157.
##
## input_context_decl -> CONTEXTUALISEE PAR . input_context_list [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## CONTEXTUALISEE PAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENTREE ASSIETTE LIDENT CONTEXTUALISEE PAR MINUS VERS
##
## Ends in an error in state: 158.
##
## nonempty_list(preceded(MINUS,input_context)) -> MINUS . input_context [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
## nonempty_list(preceded(MINUS,input_context)) -> MINUS . input_context nonempty_list(preceded(MINUS,input_context)) [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENTREE ASSIETTE LIDENT CONTEXTUALISEE PAR TOUT UIDENT VERS
##
## Ends in an error in state: 162.
##
## nonempty_list(context) -> context . [ OPERATION MINUS EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
## nonempty_list(context) -> context . nonempty_list(context) [ OPERATION MINUS EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## context
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENTREE ASSIETTE VERS
##
## Ends in an error in state: 169.
##
## input_decl -> ENTREE ASSIETTE . LIDENT loption(input_context_decl) [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## ENTREE ASSIETTE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ENTREE ASSIETTE LIDENT VERS
##
## Ends in an error in state: 170.
##
## input_decl -> ENTREE ASSIETTE LIDENT . loption(input_context_decl) [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## ENTREE ASSIETTE LIDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: DEFICIT SUR VERS
##
## Ends in an error in state: 173.
##
## deficit_decl -> DEFICIT SUR . pool PAR holder [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## DEFICIT SUR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: DEFAUT SUR VERS
##
## Ends in an error in state: 178.
##
## default_decl -> DEFAUT SUR . pool VERS holder [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## DEFAUT SUR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: DEFAUT SUR ASSIETTE LIDENT TOTAL
##
## Ends in an error in state: 179.
##
## default_decl -> DEFAUT SUR pool . VERS holder [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## DEFAUT SUR pool
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 9, spurious reduction of production pool -> ASSIETTE LIDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: AVANCE LABEL SUR VERS
##
## Ends in an error in state: 196.
##
## advance -> AVANCE LABEL SUR . holder PAR actor MONTANT formula [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## AVANCE LABEL SUR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: AVANCE LABEL SUR LIDENT PAR LIDENT VERS
##
## Ends in an error in state: 199.
##
## advance -> AVANCE LABEL SUR holder PAR actor . MONTANT formula [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## AVANCE LABEL SUR holder PAR actor
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 4, spurious reduction of production actor_desc -> LIDENT
## In state 24, spurious reduction of production actor -> actor_desc
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: AVANCE LABEL SUR LIDENT PAR LIDENT MONTANT VERS
##
## Ends in an error in state: 200.
##
## advance -> AVANCE LABEL SUR holder PAR actor MONTANT . formula [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## AVANCE LABEL SUR holder PAR actor MONTANT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: AVANCE LABEL SUR LIDENT PAR LIDENT MONTANT DATE VERS
##
## Ends in an error in state: 201.
##
## advance -> AVANCE LABEL SUR holder PAR actor MONTANT formula . [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
## formula_desc -> formula . PLUS formula [ TOTAL PLUS OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE AVANCE ACTEUR ]
## formula_desc -> formula . MINUS formula [ TOTAL PLUS OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE AVANCE ACTEUR ]
## formula_desc -> formula . MULT formula [ TOTAL PLUS OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE AVANCE ACTEUR ]
## formula_desc -> formula . DIV formula [ TOTAL PLUS OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE AVANCE ACTEUR ]
## formula_desc -> formula . COURANT [ TOTAL PLUS OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE AVANCE ACTEUR ]
## formula_desc -> formula . TOTAL [ TOTAL PLUS OPERATION MULT MINUS EVENEMENT EOF ENTREE DIV DEFICIT DEFAUT COURANT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## AVANCE LABEL SUR holder PAR actor MONTANT formula
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ACTEUR VERS
##
## Ends in an error in state: 202.
##
## actor_decl -> ACTEUR . LIDENT [ OPERATION EVENEMENT EOF ENTREE DEFICIT DEFAUT CONTEXTE CONSTANTE AVANCE ACTEUR ]
##
## The known suffix of the stack is as follows:
## ACTEUR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: ACTEUR LIDENT RPAR
##
## Ends in an error in state: 204.
##
## list(toplevel_decl) -> toplevel_decl . list(toplevel_decl) [ EOF ]
##
## The known suffix of the stack is as follows:
## toplevel_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>
