program: VERS
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##
#
program: SECTION UIDENT FIN VERS
##
## Ends in an error in state: 144.
##
## list(toplevel_decl) -> toplevel_decl . list(toplevel_decl) [ FIN EOF ]
##
## The known suffix of the stack is as follows:
## toplevel_decl
##

Expected section or declaration.

program: SORTIE VERS
##
## Ends in an error in state: 1.
##
## output_decl -> SORTIE . LIDENT [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## SORTIE
##
#
program: OPERATION LABEL APRES EVENEMENT VERS
##
## Ends in an error in state: 50.
##
## event_expr -> EVENEMENT . LIDENT [ SORTIE SECTION QUOTEPART QUAND OU OPERATION LCUR FIN EVENEMENT ET EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## EVENEMENT
##
#
program: OPERATION LABEL VERS VERS
##
## Ends in an error in state: 67.
##
## destinataire -> VERS . flow_expr [ SUR SORTIE SECTION RCUR QUOTEPART QUAND POUR OPERATION LCUR FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## VERS
##
#
program: EVENEMENT VERS
##
## Ends in an error in state: 94.
##
## event_decl -> EVENEMENT . LIDENT ATTEINT QUAND event_expr [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## EVENEMENT
##
#
program: OPERATION LABEL VERS ASSIETTE VERS
##
## Ends in an error in state: 33.
##
## flow_expr -> ASSIETTE . LIDENT [ VERS SUR SORTIE SECTION RPAR RCUR QUOTEPART QUAND POUR PLUS PAR OU OPERATION MULT MONTANT MINUS LCUR FIN EVENEMENT ET EQ EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## ASSIETTE
##
#
program: OPERATION LABEL VERS LIDENT LBRA VERS
##
## Ends in an error in state: 17.
##
## flow_expr -> LIDENT LBRA . LIDENT RBRA [ VERS SUR SORTIE SECTION RPAR RCUR QUOTEPART QUAND POUR PLUS PAR OU OPERATION MULT MONTANT MINUS LCUR FIN EVENEMENT ET EQ EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## flow_expr -> LIDENT LBRA . separated_nonempty_list(COMMA,UIDENT) RBRA [ VERS SUR SORTIE SECTION RPAR RCUR QUOTEPART QUAND POUR PLUS PAR OU OPERATION MULT MONTANT MINUS LCUR FIN EVENEMENT ET EQ EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## LIDENT LBRA
##

Expected lowercase identifier.

program: SECTION VERS
##
## Ends in an error in state: 3.
##
## section -> SECTION . UIDENT list(context) list(event_guard) list(toplevel_decl) FIN [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## SECTION
##

Expected uppercase identifier.

program: SECTION UIDENT VERS
##
## Ends in an error in state: 4.
##
## section -> SECTION UIDENT . list(context) list(event_guard) list(toplevel_decl) FIN [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## SECTION UIDENT
##

Expected contextualisation, an event guard, a sub-section, or a declaration.

program: OPERATION LABEL POUR VERS
##
## Ends in an error in state: 5.
##
## context -> POUR . UIDENT nonempty_list(UIDENT) [ SUR SORTIE SECTION QUOTEPART QUAND POUR OPERATION LCUR FIN EVENEMENT ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## context -> POUR . TOUT UIDENT [ SUR SORTIE SECTION QUOTEPART QUAND POUR OPERATION LCUR FIN EVENEMENT ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## POUR
##
#
program: OPERATION LABEL POUR UIDENT VERS
##
## Ends in an error in state: 6.
##
## context -> POUR UIDENT . nonempty_list(UIDENT) [ SUR SORTIE SECTION QUOTEPART QUAND POUR OPERATION LCUR FIN EVENEMENT ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## POUR UIDENT
##
#
program: OPERATION LABEL POUR TOUT VERS
##
## Ends in an error in state: 10.
##
## context -> POUR TOUT . UIDENT [ SUR SORTIE SECTION QUOTEPART QUAND POUR OPERATION LCUR FIN EVENEMENT ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## POUR TOUT
##

Expected context cases of a given context type, either for all cases or by listing them.
Examples:
 - pour Support Salles VOD
 - pour tout Support

program: OPERATION LABEL POUR UIDENT UIDENT VERS
##
## Ends in an error in state: 7.
##
## nonempty_list(UIDENT) -> UIDENT . [ TYPE SUR SORTIE SECTION QUOTEPART QUAND POUR OPERATION LCUR FIN EVENEMENT ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## nonempty_list(UIDENT) -> UIDENT . nonempty_list(UIDENT) [ TYPE SUR SORTIE SECTION QUOTEPART QUAND POUR OPERATION LCUR FIN EVENEMENT ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## UIDENT
##
#
program: OPERATION LABEL POUR TOUT UIDENT SORTIE
##
## Ends in an error in state: 71.
##
## operation -> OPERATION LABEL option(destinataire) list(context) . option(source) nonempty_list(expression) [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## OPERATION LABEL option(destinataire) list(context)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 92, spurious reduction of production list(context) ->
## In state 93, spurious reduction of production list(context) -> context list(context)
##

Expected more context, or a redistribution expression.


program: OPERATION LABEL QUAND VERS
##
## Ends in an error in state: 13.
##
## event_guard -> QUAND . event_expr [ SORTIE SECTION QUOTEPART QUAND OPERATION LCUR FIN EVENEMENT ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## QUAND
##
#
program: OPERATION LABEL APRES EVENEMENT LIDENT OU VERS
##
## Ends in an error in state: 56.
##
## event_expr -> event_expr OU . event_expr [ SORTIE SECTION QUOTEPART QUAND OU OPERATION LCUR FIN EVENEMENT ET EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## event_expr OU
##
#
program: OPERATION LABEL APRES EVENEMENT LIDENT ET VERS
##
## Ends in an error in state: 58.
##
## event_expr -> event_expr ET . event_expr [ SORTIE SECTION QUOTEPART QUAND OU OPERATION LCUR FIN EVENEMENT ET EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## event_expr ET
##
#
program: OPERATION LABEL AVANT VERS
##
## Ends in an error in state: 60.
##
## event_guard -> AVANT . event_expr [ SORTIE SECTION QUOTEPART QUAND OPERATION LCUR FIN EVENEMENT ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## AVANT
##
#
program: OPERATION LABEL APRES VERS
##
## Ends in an error in state: 62.
##
## event_guard -> APRES . event_expr [ SORTIE SECTION QUOTEPART QUAND OPERATION LCUR FIN EVENEMENT ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## APRES
##

Expected an event expression.

program: OPERATION LABEL APRES LPAR VERS
##
## Ends in an error in state: 15.
##
## formula -> LPAR . formula RPAR [ VERS SORTIE SECTION RPAR RCUR QUOTEPART QUAND PLUS OU OPERATION MULT MINUS LCUR FIN EVENEMENT ET EQ EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## LPAR
##
#
program: OPERATION LABEL APRES DATE PLUS VERS
##
## Ends in an error in state: 38.
##
## formula -> formula PLUS . formula [ VERS SORTIE SECTION RPAR RCUR QUOTEPART QUAND PLUS OU OPERATION MULT MINUS LCUR FIN EVENEMENT ET EQ EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## formula PLUS
##
#
program: OPERATION LABEL APRES DATE MULT VERS
##
## Ends in an error in state: 40.
##
## formula -> formula MULT . formula [ VERS SORTIE SECTION RPAR RCUR QUOTEPART QUAND PLUS OU OPERATION MULT MINUS LCUR FIN EVENEMENT ET EQ EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## formula MULT
##
#
program: OPERATION LABEL APRES DATE DIV VERS
##
## Ends in an error in state: 46.
##
## formula -> formula DIV . formula [ VERS SORTIE SECTION RPAR RCUR QUOTEPART QUAND PLUS OU OPERATION MULT MINUS LCUR FIN EVENEMENT ET EQ EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## formula DIV
##
#
program: OPERATION LABEL APRES DATE MINUS VERS
##
## Ends in an error in state: 48.
##
## formula -> formula MINUS . formula [ VERS SORTIE SECTION RPAR RCUR QUOTEPART QUAND PLUS OU OPERATION MULT MINUS LCUR FIN EVENEMENT ET EQ EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## formula MINUS
##
#
program: OPERATION LABEL BONUS VERS
##
## Ends in an error in state: 81.
##
## simple_expr -> BONUS . formula option(destinataire) [ SORTIE SECTION RCUR QUOTEPART QUAND OPERATION LCUR FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## BONUS
##

Expected a formula.

program: OPERATION LABEL APRES INT ANS UIDENT
##
## Ends in an error in state: 27.
##
## duration_year -> INT ANS . option(duration_month) [ VERS SORTIE SECTION RPAR RCUR QUOTEPART QUAND PLUS OU OPERATION MULT MINUS LCUR FIN EVENEMENT ET EQ EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## INT ANS
##

Malformed event expression. Expected a date (literal or computed) or an equality test.

program: OPERATION LABEL APRES INT ANS INT VERS
##
## Ends in an error in state: 28.
##
## duration_month -> INT . MOIS [ VERS SORTIE SECTION RPAR RCUR QUOTEPART QUAND PLUS OU OPERATION MULT MINUS LCUR FIN EVENEMENT ET EQ EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## INT
##

Malformed duration. Expected a time unit.

program: OPERATION LABEL APRES LPAR DATE MOIS
##
## Ends in an error in state: 36.
##
## formula -> formula . PLUS formula [ RPAR PLUS MULT MINUS DIV ]
## formula -> formula . MINUS formula [ RPAR PLUS MULT MINUS DIV ]
## formula -> formula . MULT formula [ RPAR PLUS MULT MINUS DIV ]
## formula -> formula . DIV formula [ RPAR PLUS MULT MINUS DIV ]
## formula -> LPAR formula . RPAR [ VERS SORTIE SECTION RPAR RCUR QUOTEPART QUAND PLUS OU OPERATION MULT MINUS LCUR FIN EVENEMENT ET EQ EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## LPAR formula
##

Malformed formula. Might miss a closing parenthesis.


program: OPERATION LABEL APRES DATE MOIS
##
## Ends in an error in state: 52.
##
## event_expr -> formula . EQ formula [ SORTIE SECTION QUOTEPART QUAND OU OPERATION LCUR FIN EVENEMENT ET EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## formula -> formula . PLUS formula [ PLUS MULT MINUS EQ DIV ]
## formula -> formula . MINUS formula [ PLUS MULT MINUS EQ DIV ]
## formula -> formula . MULT formula [ PLUS MULT MINUS EQ DIV ]
## formula -> formula . DIV formula [ PLUS MULT MINUS EQ DIV ]
##
## The known suffix of the stack is as follows:
## formula
##

Malformed event expression. Expected either '=', or a formula operator.

program: OPERATION LABEL APRES DATE EQ VERS
##
## Ends in an error in state: 53.
##
## event_expr -> formula EQ . formula [ SORTIE SECTION QUOTEPART QUAND OU OPERATION LCUR FIN EVENEMENT ET EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## formula EQ
##

Malformed event expression. Expected a formula.

program: OPERATION LABEL APRES DATE EQ DATE MOIS
##
## Ends in an error in state: 54.
##
## event_expr -> formula EQ formula . [ SORTIE SECTION QUOTEPART QUAND OU OPERATION LCUR FIN EVENEMENT ET EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## formula -> formula . PLUS formula [ SORTIE SECTION QUOTEPART QUAND PLUS OU OPERATION MULT MINUS LCUR FIN EVENEMENT ET EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## formula -> formula . MINUS formula [ SORTIE SECTION QUOTEPART QUAND PLUS OU OPERATION MULT MINUS LCUR FIN EVENEMENT ET EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## formula -> formula . MULT formula [ SORTIE SECTION QUOTEPART QUAND PLUS OU OPERATION MULT MINUS LCUR FIN EVENEMENT ET EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## formula -> formula . DIV formula [ SORTIE SECTION QUOTEPART QUAND PLUS OU OPERATION MULT MINUS LCUR FIN EVENEMENT ET EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## formula EQ formula
##
#
program: OPERATION LABEL QUAND EVENEMENT LIDENT VERS
##
## Ends in an error in state: 89.
##
## expression -> event_guard . expression [ SORTIE SECTION RCUR QUOTEPART QUAND OPERATION LCUR FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## event_guard
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 55, spurious reduction of production event_guard -> QUAND event_expr
##
#
program: OPERATION LABEL APRES EVENEMENT LIDENT OU EVENEMENT LIDENT VERS
##
## Ends in an error in state: 57.
##
## event_expr -> event_expr . ET event_expr [ SORTIE SECTION QUOTEPART QUAND OU OPERATION LCUR FIN EVENEMENT ET EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## event_expr -> event_expr . OU event_expr [ SORTIE SECTION QUOTEPART QUAND OU OPERATION LCUR FIN EVENEMENT ET EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## event_expr -> event_expr OU event_expr . [ SORTIE SECTION QUOTEPART QUAND OU OPERATION LCUR FIN EVENEMENT ET EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## event_expr OU event_expr
##
#
program: EVENEMENT LIDENT ATTEINT QUAND EVENEMENT LIDENT VERS
##
## Ends in an error in state: 98.
##
## event_decl -> EVENEMENT LIDENT ATTEINT QUAND event_expr . [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
## event_expr -> event_expr . ET event_expr [ SORTIE SECTION OU OPERATION FIN EVENEMENT ET EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
## event_expr -> event_expr . OU event_expr [ SORTIE SECTION OU OPERATION FIN EVENEMENT ET EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## EVENEMENT LIDENT ATTEINT QUAND event_expr
##

Unexpected word after event expression.

program: OPERATION LABEL UIDENT
##
## Ends in an error in state: 66.
##
## operation -> OPERATION LABEL . option(destinataire) list(context) option(source) nonempty_list(expression) [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## OPERATION LABEL
##

Expected some context, or a destination, or a redistribution expression.

program: OPERATION LABEL VERS LIDENT VERS
##
## Ends in an error in state: 68.
##
## flow_expr -> LIDENT . LBRA LIDENT RBRA [ VERS SUR SORTIE SECTION RCUR QUOTEPART QUAND POUR PAR OPERATION MONTANT LCUR FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## flow_expr -> LIDENT . LBRA separated_nonempty_list(COMMA,UIDENT) RBRA [ VERS SUR SORTIE SECTION RCUR QUOTEPART QUAND POUR PAR OPERATION MONTANT LCUR FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## LIDENT
##

Expected bracketed label on flow expression.

program: OPERATION LABEL QUOTEPART VERS
##
## Ends in an error in state: 76.
##
## simple_expr -> QUOTEPART . formula option(destinataire) [ SORTIE SECTION RCUR QUOTEPART QUAND OPERATION LCUR FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## QUOTEPART
##

Malformed redistribution statement. Such statements have the form:
 - quotepart [some formula] [optional destination]
 - bonus [some formula] [optional destination]

program: OPERATION LABEL QUOTEPART DATE MOIS
##
## Ends in an error in state: 77.
##
## formula -> formula . PLUS formula [ VERS SORTIE SECTION RCUR QUOTEPART QUAND PLUS OPERATION MULT MINUS LCUR FIN EVENEMENT EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## formula -> formula . MINUS formula [ VERS SORTIE SECTION RCUR QUOTEPART QUAND PLUS OPERATION MULT MINUS LCUR FIN EVENEMENT EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## formula -> formula . MULT formula [ VERS SORTIE SECTION RCUR QUOTEPART QUAND PLUS OPERATION MULT MINUS LCUR FIN EVENEMENT EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## formula -> formula . DIV formula [ VERS SORTIE SECTION RCUR QUOTEPART QUAND PLUS OPERATION MULT MINUS LCUR FIN EVENEMENT EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## simple_expr -> QUOTEPART formula . option(destinataire) [ SORTIE SECTION RCUR QUOTEPART QUAND OPERATION LCUR FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## QUOTEPART formula
##
#
program: OPERATION LABEL BONUS DATE MOIS
##
## Ends in an error in state: 82.
##
## formula -> formula . PLUS formula [ VERS SORTIE SECTION RCUR QUOTEPART QUAND PLUS OPERATION MULT MINUS LCUR FIN EVENEMENT EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## formula -> formula . MINUS formula [ VERS SORTIE SECTION RCUR QUOTEPART QUAND PLUS OPERATION MULT MINUS LCUR FIN EVENEMENT EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## formula -> formula . MULT formula [ VERS SORTIE SECTION RCUR QUOTEPART QUAND PLUS OPERATION MULT MINUS LCUR FIN EVENEMENT EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## formula -> formula . DIV formula [ VERS SORTIE SECTION RCUR QUOTEPART QUAND PLUS OPERATION MULT MINUS LCUR FIN EVENEMENT EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
## simple_expr -> BONUS formula . option(destinataire) [ SORTIE SECTION RCUR QUOTEPART QUAND OPERATION LCUR FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## BONUS formula
##

Unexpected word after redistribution formula.

program: OPERATION LABEL POUR TOUT UIDENT VERS
##
## Ends in an error in state: 92.
##
## list(context) -> context . list(context) [ SUR SORTIE SECTION QUOTEPART QUAND OPERATION LCUR FIN EVENEMENT ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## context
##

Unexpected word after context.

program: EVENEMENT LIDENT VERS
##
## Ends in an error in state: 95.
##
## event_decl -> EVENEMENT LIDENT . ATTEINT QUAND event_expr [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## EVENEMENT LIDENT
##
#
program: EVENEMENT LIDENT ATTEINT VERS
##
## Ends in an error in state: 96.
##
## event_decl -> EVENEMENT LIDENT ATTEINT . QUAND event_expr [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## EVENEMENT LIDENT ATTEINT
##
#
program: EVENEMENT LIDENT ATTEINT QUAND VERS
##
## Ends in an error in state: 97.
##
## event_decl -> EVENEMENT LIDENT ATTEINT QUAND . event_expr [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## EVENEMENT LIDENT ATTEINT QUAND
##

Malformed event declaration. Well-formed examples:
- evenement my_event atteint quand my_money = 100
- evenement my_event atteint quand 2023/12/25

program: ENTREE VERS
##
## Ends in an error in state: 99.
##
## input_decl -> ENTREE . boption(CALCULABLE) LIDENT loption(input_context) input_type [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## ENTREE
##
#
program: ENTREE CALCULABLE VERS
##
## Ends in an error in state: 101.
##
## input_decl -> ENTREE boption(CALCULABLE) . LIDENT loption(input_context) input_type [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## ENTREE boption(CALCULABLE)
##
#
program: ENTREE LIDENT VERS
##
## Ends in an error in state: 102.
##
## input_decl -> ENTREE boption(CALCULABLE) LIDENT . loption(input_context) input_type [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## ENTREE boption(CALCULABLE) LIDENT
##
#
program: ENTREE LIDENT CONTEXTUALISEE VERS
##
## Ends in an error in state: 103.
##
## input_context -> CONTEXTUALISEE . PAR nonempty_list(UIDENT) [ TYPE ]
##
## The known suffix of the stack is as follows:
## CONTEXTUALISEE
##
#
program: ENTREE LIDENT CONTEXTUALISEE PAR VERS
##
## Ends in an error in state: 104.
##
## input_context -> CONTEXTUALISEE PAR . nonempty_list(UIDENT) [ TYPE ]
##
## The known suffix of the stack is as follows:
## CONTEXTUALISEE PAR
##
#
program: ENTREE LIDENT CONTEXTUALISEE PAR UIDENT SUR
##
## Ends in an error in state: 106.
##
## input_decl -> ENTREE boption(CALCULABLE) LIDENT loption(input_context) . input_type [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## ENTREE boption(CALCULABLE) LIDENT loption(input_context)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 7, spurious reduction of production nonempty_list(UIDENT) -> UIDENT
## In state 105, spurious reduction of production input_context -> CONTEXTUALISEE PAR nonempty_list(UIDENT)
## In state 113, spurious reduction of production loption(input_context) -> input_context
##

Malformed input declaration. An input is declared with an optional computable
flag, a name, an optionnal context association, and a type.
Well-formed examples:
- entree my_input type entier
- entree calculable my_input contextualisee par My_context_type type flux argent

program: ENTREE LIDENT TYPE VERS
##
## Ends in an error in state: 107.
##
## input_type -> TYPE . base_type [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## TYPE
##

Expected a type identifier. It can be:
- entier
- rationnel
- argent

program: CONTEXTE VERS
##
## Ends in an error in state: 124.
##
## context_decl -> CONTEXTE . UIDENT COLON nonempty_list(context_case) [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## CONTEXTE
##
#
program: CONTEXTE UIDENT VERS
##
## Ends in an error in state: 125.
##
## context_decl -> CONTEXTE UIDENT . COLON nonempty_list(context_case) [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## CONTEXTE UIDENT
##
#
program: CONTEXTE UIDENT COLON VERS
##
## Ends in an error in state: 126.
##
## context_decl -> CONTEXTE UIDENT COLON . nonempty_list(context_case) [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## CONTEXTE UIDENT COLON
##
#
program: CONTEXTE UIDENT COLON MINUS VERS
##
## Ends in an error in state: 127.
##
## context_case -> MINUS . UIDENT [ SORTIE SECTION OPERATION MINUS FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## MINUS
##
#
program: CONTEXTE UIDENT COLON MINUS UIDENT VERS
##
## Ends in an error in state: 130.
##
## nonempty_list(context_case) -> context_case . [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
## nonempty_list(context_case) -> context_case . nonempty_list(context_case) [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## context_case
##

Malformed context type declaration. Example:
contexte My_context_type :
 - my_case_1
 - my_case_2

program: CONSTANTE VERS
##
## Ends in an error in state: 132.
##
## constant_decl -> CONSTANTE . LIDENT COLON literal [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## CONSTANTE
##
#
program: CONSTANTE LIDENT VERS
##
## Ends in an error in state: 133.
##
## constant_decl -> CONSTANTE LIDENT . COLON literal [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## CONSTANTE LIDENT
##
#
program: CONSTANTE LIDENT COLON VERS
##
## Ends in an error in state: 134.
##
## constant_decl -> CONSTANTE LIDENT COLON . literal [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## CONSTANTE LIDENT COLON
##

Malformed constant declaration. Example:
- constante my_const : 99.99

program: SECTION UIDENT SORTIE LIDENT EOF
##
## Ends in an error in state: 156.
##
## section -> SECTION UIDENT list(context) list(event_guard) list(toplevel_decl) . FIN [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## SECTION UIDENT list(context) list(event_guard) list(toplevel_decl)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 144, spurious reduction of production list(toplevel_decl) ->
## In state 148, spurious reduction of production list(toplevel_decl) -> toplevel_decl list(toplevel_decl)
##

Missing keyword 'fin' to close section.

program: SECTION UIDENT APRES EVENEMENT LIDENT VERS
##
## Ends in an error in state: 158.
##
## list(event_guard) -> event_guard . list(event_guard) [ SORTIE SECTION OPERATION FIN EVENEMENT ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## event_guard
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production event_guard -> APRES event_expr
##
#
program: SECTION UIDENT POUR TOUT UIDENT SUR
##
## Ends in an error in state: 12.
##
## section -> SECTION UIDENT list(context) . list(event_guard) list(toplevel_decl) FIN [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## SECTION UIDENT list(context)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 92, spurious reduction of production list(context) ->
## In state 93, spurious reduction of production list(context) -> context list(context)
##

Expected event guard or a declaration.

program: SORTIE LIDENT FIN
##
## Ends in an error in state: 161.
##
## program -> list(toplevel_decl) . EOF [ # ]
##
## The known suffix of the stack is as follows:
## list(toplevel_decl)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 144, spurious reduction of production list(toplevel_decl) ->
## In state 148, spurious reduction of production list(toplevel_decl) -> toplevel_decl list(toplevel_decl)
##

Unexpected word after declaration.

program: OPERATION LABEL SUR VERS
##
## Ends in an error in state: 72.
##
## source -> SUR . flow_expr [ QUOTEPART QUAND PAR LCUR BONUS AVANT APRES ]
##
## The known suffix of the stack is as follows:
## SUR
##

Malformed source of repartition. Example:
- sur assiette rbdApresCom

program: OPERATION LABEL LCUR VERS
##
## Ends in an error in state: 80.
##
## expression -> LCUR . nonempty_list(expression) RCUR [ SORTIE SECTION RCUR QUOTEPART QUAND OPERATION LCUR FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## LCUR
##

Expected guard or redistribution expression.

program: OPERATION LABEL LCUR BONUS DATE SORTIE
##
## Ends in an error in state: 85.
##
## expression -> LCUR nonempty_list(expression) . RCUR [ SORTIE SECTION RCUR QUOTEPART QUAND OPERATION LCUR FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## LCUR nonempty_list(expression)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 82, spurious reduction of production option(destinataire) ->
## In state 83, spurious reduction of production simple_expr -> BONUS formula option(destinataire)
## In state 84, spurious reduction of production expression -> simple_expr
## In state 87, spurious reduction of production nonempty_list(expression) -> expression
##

Unexpected word after redistribution expression. Might be an unclosed block.

program: OPERATION LABEL VERS LIDENT LBRA LIDENT VERS
##
## Ends in an error in state: 21.
##
## flow_expr -> LIDENT LBRA LIDENT . RBRA [ VERS SUR SORTIE SECTION RPAR RCUR QUOTEPART QUAND POUR PLUS PAR OU OPERATION MULT MONTANT MINUS LCUR FIN EVENEMENT ET EQ EOF ENTREE DIV DEFICITAIRE DEFAUT CONTEXTE CONSTANTE BONUS AVANT AVANCE APRES ]
##
## The known suffix of the stack is as follows:
## LIDENT LBRA LIDENT
##
#
program: DEFAUT SUR LIDENT LBRA UIDENT VERS
##
## Ends in an error in state: 18.
##
## separated_nonempty_list(COMMA,UIDENT) -> UIDENT . [ RBRA ]
## separated_nonempty_list(COMMA,UIDENT) -> UIDENT . COMMA separated_nonempty_list(COMMA,UIDENT) [ RBRA ]
##
## The known suffix of the stack is as follows:
## UIDENT
##

Expected closing bracket.

program: OPERATION LABEL VERS ASSIETTE LIDENT VERS
##
## Ends in an error in state: 70.
##
## operation -> OPERATION LABEL option(destinataire) . list(context) option(source) nonempty_list(expression) [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## OPERATION LABEL option(destinataire)
##

Unexpected word after destination.

program: OPERATION LABEL SUR ASSIETTE LIDENT VERS
##
## Ends in an error in state: 75.
##
## operation -> OPERATION LABEL option(destinataire) list(context) option(source) . nonempty_list(expression) [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## OPERATION LABEL option(destinataire) list(context) option(source)
##

Unexpected word after source.

program: OPERATION LABEL LCUR BONUS DATE RCUR VERS
##
## Ends in an error in state: 87.
##
## nonempty_list(expression) -> expression . [ SORTIE SECTION RCUR OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
## nonempty_list(expression) -> expression . nonempty_list(expression) [ SORTIE SECTION RCUR OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## expression
##

Unexpected word after block redistribution.

program: OPERATION VERS
##
## Ends in an error in state: 65.
##
## operation -> OPERATION . LABEL option(destinataire) list(context) option(source) nonempty_list(expression) [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## OPERATION
##

Expected label for operation.

program: DEFAUT VERS
##
## Ends in an error in state: 119.
##
## default_decl -> DEFAUT . SUR flow_expr VERS flow_expr [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## DEFAUT
##
#
program: DEFAUT SUR VERS
##
## Ends in an error in state: 120.
##
## default_decl -> DEFAUT SUR . flow_expr VERS flow_expr [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## DEFAUT SUR
##
#
program: DEFAUT SUR ASSIETTE LIDENT UIDENT
##
## Ends in an error in state: 121.
##
## default_decl -> DEFAUT SUR flow_expr . VERS flow_expr [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## DEFAUT SUR flow_expr
##
#
program: DEFAUT SUR ASSIETTE LIDENT VERS VERS
##
## Ends in an error in state: 122.
##
## default_decl -> DEFAUT SUR flow_expr VERS . flow_expr [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## DEFAUT SUR flow_expr VERS
##

Malformed default declaration. Examples:
 - defaut sur assiette rbd vers assiette rnpp
 - defaut sur assiette rnpp vers prod[residuel]

program: DEFICITAIRE VERS
##
## Ends in an error in state: 114.
##
## deficit_decl -> DEFICITAIRE . SUR flow_expr PAR flow_expr [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## DEFICITAIRE
##
#
program: DEFICITAIRE SUR VERS
##
## Ends in an error in state: 115.
##
## deficit_decl -> DEFICITAIRE SUR . flow_expr PAR flow_expr [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## DEFICITAIRE SUR
##
#
program: DEFICITAIRE SUR ASSIETTE LIDENT VERS
##
## Ends in an error in state: 116.
##
## deficit_decl -> DEFICITAIRE SUR flow_expr . PAR flow_expr [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## DEFICITAIRE SUR flow_expr
##
#
program: DEFICITAIRE SUR ASSIETTE LIDENT PAR VERS
##
## Ends in an error in state: 117.
##
## deficit_decl -> DEFICITAIRE SUR flow_expr PAR . flow_expr [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## DEFICITAIRE SUR flow_expr PAR
##

Malformed deficit declaration. Example:
 - deficitaire sur assiette rbd par assiette prodDeficiteRbd

program: DEFAUT SUR LIDENT LBRA UIDENT COMMA VERS
##
## Ends in an error in state: 19.
##
## separated_nonempty_list(COMMA,UIDENT) -> UIDENT COMMA . separated_nonempty_list(COMMA,UIDENT) [ RBRA ]
##
## The known suffix of the stack is as follows:
## UIDENT COMMA
##

Expected a comma separated list of context cases.

program: AVANCE VERS
##
## Ends in an error in state: 136.
##
## advance -> AVANCE . LABEL source PAR flow_expr MONTANT formula destinataire [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## AVANCE
##
#
program: AVANCE LABEL VERS
##
## Ends in an error in state: 137.
##
## advance -> AVANCE LABEL . source PAR flow_expr MONTANT formula destinataire [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## AVANCE LABEL
##
#
program: AVANCE LABEL SUR ASSIETTE LIDENT VERS
##
## Ends in an error in state: 138.
##
## advance -> AVANCE LABEL source . PAR flow_expr MONTANT formula destinataire [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## AVANCE LABEL source
##
#
program: AVANCE LABEL SUR ASSIETTE LIDENT PAR VERS
##
## Ends in an error in state: 139.
##
## advance -> AVANCE LABEL source PAR . flow_expr MONTANT formula destinataire [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## AVANCE LABEL source PAR
##
#
program: AVANCE LABEL SUR ASSIETTE LIDENT PAR ASSIETTE LIDENT VERS
##
## Ends in an error in state: 140.
##
## advance -> AVANCE LABEL source PAR flow_expr . MONTANT formula destinataire [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## AVANCE LABEL source PAR flow_expr
##
#
program: AVANCE LABEL SUR ASSIETTE LIDENT PAR ASSIETTE LIDENT MONTANT VERS
##
## Ends in an error in state: 141.
##
## advance -> AVANCE LABEL source PAR flow_expr MONTANT . formula destinataire [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
##
## The known suffix of the stack is as follows:
## AVANCE LABEL source PAR flow_expr MONTANT
##
#
program: AVANCE LABEL SUR ASSIETTE LIDENT PAR ASSIETTE LIDENT MONTANT DATE MOIS
##
## Ends in an error in state: 142.
##
## advance -> AVANCE LABEL source PAR flow_expr MONTANT formula . destinataire [ SORTIE SECTION OPERATION FIN EVENEMENT EOF ENTREE DEFICITAIRE DEFAUT CONTEXTE CONSTANTE AVANCE ]
## formula -> formula . PLUS formula [ VERS PLUS MULT MINUS DIV ]
## formula -> formula . MINUS formula [ VERS PLUS MULT MINUS DIV ]
## formula -> formula . MULT formula [ VERS PLUS MULT MINUS DIV ]
## formula -> formula . DIV formula [ VERS PLUS MULT MINUS DIV ]
##
## The known suffix of the stack is as follows:
## AVANCE LABEL source PAR flow_expr MONTANT formula
##

Malformed advance declaration. Example:
- avance 'my_advance' sur my_source par my_provider montant 5000$ vers my_output
